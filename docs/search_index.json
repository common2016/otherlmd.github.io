[["Julia.html", "2 Julia 2.1 Julia类型的一些体会 2.2 Julia数值求根 2.3 其他tips", " 2 Julia 2.1 Julia类型的一些体会 Julia一些包会自己构造一些类型，我们很多时候需要访问这个类型的成员，但成员的名字往往并不事先知道。一般情况下，可以通过下面三种办法获知成员的名字： dump(类型) fieldnames(类型) 在帮助系统查看这个类型的帮助 2.2 Julia数值求根 对于单方程求根，可以使用两个包如下。这两个包可以找到既定区间下所有的根。代码案例如下， using IntervalArithmetic, IntervalRootFinding f(x) = sin(x) - 0.1*x^2 + 1 a = roots(f, -10..10) # 第二个参数就是在`IntervalArithmetic`包中区间这个类型的表达方式 a[1].interval.lo # 返回第一个根的下界 这里有几个注意的地方:第一，roots返回的是Root对象，可以通过前面说的方法，查看它的成员字段，知道它有两个字段一个是interval，一个是status。我们需要前者，然后interval本身又是一个类型，于是按照前面的方法继续查看它的字段，一个是lo，一个hi。 2.3 其他tips Julia的一个IDE就是Atom中的Juno，它已经非常好用了。记录几个点： 快捷键配置，是在一个文件中修改的，见https://blog.csdn.net/uniqsa/article/details/91315714。这个给一个我常用的运行和保存配置书写,注意缩进： &#39;.platform-darwin atom-text-editor[data-grammar=&quot;source julia&quot;]&#39;: &#39;ctrl-enter&#39;: &#39;julia-client:run-block&#39; &#39;shift-ctrl-enter&#39;: &#39;julia-client:run-all&#39; &#39;body&#39;: &#39;ctrl-s&#39;: &#39;core:save&#39; 安装包 import Pkg; Pkg.add(&quot;DataFrames&quot;) # Pkg.rm()是删除包 using DataFrames # 导入包 Pipe包提供了强大的管道操作|&gt;，与R语言中的.不同，它使用_作为占位符。 @pipe data |&gt; addX(_[1],_[2]) |&gt; println 1:5返回的是一个迭代器，可以用collect(1:5)变成一个数组 using RCall, Statistics可以同时导入多个包 mean(skipmissing([1, missing, 3]))求均值忽略缺失值 查看模块中所有方法或变量names(模块)。通常是去github上看它的案例用法。 返回当前工作空间的变量，可以用names(Main)或者varinfo() 函数名字中带‘！’号，该函数不仅返回值，还会更改参数的值。 在Julia表达式中，如果要标志某个字符是变量，也就是它要被它的内涵所替代，前面要加美元符号。比如定义一个宏： macro sayhello(name) :(println(&quot;Hello,&quot;,$name)) # 注意括号的使用 end 变量赋值 a,b,c = 1,&#39;a&#39;,3 一些函数可以作用于矩阵，如果在其后加个点意味着它作用于矩阵的元素，如 x1 = randn(6,4) x2 = round.(x1) 创建矩阵的方式，和matlab有许多共通之处。拼接也是类似的。 A = [1 2 3 4;5 6 7 8 9]; A = randn(10,8) # 10行8列的正态分布矩阵 A = ones（6，5） include类似于R的source. DataFrames包 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
